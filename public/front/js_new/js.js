jQuery(function ($) { ServicesModuleInitialize(); }); function ServicesModuleInitialize() { $(document).on('s123.page.ready', function (event) { var $section = $('section.s123-module-services'); $section.each(function (index) { var $sectionThis = $(this); var categories = new ModuleLayoutCategories({ $items: $sectionThis.find('.services-category'), $categoriesContainer: $sectionThis.find('.categories-panel'), $filterButton: $sectionThis.find('.items-responsive-filter'), $categories: $sectionThis.find('.items-categories-container li') }); }); }); } jQuery(function ($) { TeamModuleInitialize(); }); function TeamModuleInitialize() { $(document).on('s123.page.ready', function (event) { var $section = $('section.s123-module-team:not(.layout-9)'); $section.each(function (index) { var $sectionThis = $(this); $sectionThis.find('.team-phone-btn').click(function () { var $this = $(this); var $teamPhone = $this.closest('.team-phone'); buildPopup('teamPopupFloatDivPhone', '', $teamPhone.find('.team-phone-popover').html(), '', true, true, true, '', ''); }); var categories = new ModuleLayoutCategories({ $items: $sectionThis.find('.team-category'), $categoriesContainer: $sectionThis.find('.categories-panel'), $filterButton: $sectionThis.find('.items-responsive-filter'), $categories: $sectionThis.find('.items-categories-container li') }); }); }); } jQuery(function ($) { TeamModuleInitialize_Layout9(); }); function TeamModuleInitialize_Layout9() {
    $(document).on('s123.page.ready', function (event) {
        var $section = $('section.s123-module-team.layout-9'); $section.each(function (index) {
            var $sectionThis = $(this); $section.off('module_layout_categories.shown').on('module_layout_categories.shown', function (event, catID) {
                var $category = $(this).find('.team-category[data-categories-filter="' + catID + '"]'); var numberImagesInRow = getSlidesPerView($category); var spaceBetween = 30; var highestMember = 0; if (numberImagesInRow == 0) { $category.find('.owl-carousel').addClass('manually-loaded'); $category.find('.team-member-wrap').css({ height: '' }); initializeTeamPhone($sectionThis); return; }
                if ($category.find('.owl-carousel').hasClass('owl-loaded')) return; $category.find('.team-member-wrap').css({ height: '' }); $category.find('.team-member-wrap').each(function () { if ($(this).height() > highestMember) { highestMember = $(this).height(); } }); if (findBootstrapEnvironment() === 'xs') { $category.find('.team-member-wrap').css({ height: (highestMember + spaceBetween) + 'px' }); } else { $category.find('.team-member-wrap').css({ height: highestMember + 'px' }); }
                $category.find('.owl-carousel').owlCarousel({ items: numberImagesInRow, autoplay: false, autoplayTimeout: 0, center: true, dots: $category.find('.owl-carousel').data('item-count') > 7 ? false : true, dotsEach: (numberImagesInRow % 2 == 1 ? true : false), margin: spaceBetween, loop: true, lazyLoad: true, stagePadding: 50, rtl: $('html').attr('dir') == 'rtl', responsive: { 0: { items: 1 }, 479: { items: 1 }, 768: { items: 1 }, 979: { items: 3 }, 1199: { items: 3 } }, onInitialize: function () { initializeTeamPhone($sectionThis); window.myLazyLoad.update(); }, onResize: function () { window.myLazyLoad.update(); }, onDrag: function () { window.myLazyLoad.update(); }, onLoadLazy: function () { window.myLazyLoad.update(); } });
            }); if ($sectionThis.find('.team-category[data-categories-filter="s123-g-show-all"]').length > 0) { $sectionThis.trigger('module_layout_categories.shown', ['s123-g-show-all']); }
            var categories = new ModuleLayoutCategories({ $items: $sectionThis.find('.team-category'), $categoriesContainer: $sectionThis.find('.categories-panel'), $filterButton: $sectionThis.find('.items-responsive-filter'), $categories: $sectionThis.find('.items-categories-container li') });
        }); function initializeTeamPhone($teamSection) { $teamSection.off('click.initializeTeamPhone').on('click.initializeTeamPhone', '.team-phone-btn', function () { var $teamPhone = $(this).closest('.team-phone'); buildPopup('teamPopupFloatDivPhone', '', $teamPhone.find('.team-phone-popover').html(), '', true, true, true, '', ''); }) }
    }); function getSlidesPerView($category) {
        var slidesPerView = 3.3; var originalItems = []; $category.find('.team-member').each(function () { if (!$(this).closest('.owl-item').hasClass('cloned')) { originalItems.push($(this)); } }); switch (findBootstrapEnvironment()) { case 'xs': case 'sm': slidesPerView = originalItems.length < 2 ? 0 : 1; break; default: slidesPerView = originalItems.length <= 3 ? 0 : 3; break; }
        return slidesPerView;
    }
    if (IsWizard()) { $(document).on('wizard.preview.device.changed', function (event) { var $section = $('section.s123-module-team.layout-9'); $section.each(function (index) { var $sectionThis = $(this); var $category = $sectionThis.find('.team-category').filter(':visible'); var $carousel = $category.find('.owl-carousel'); $carousel.trigger('destroy.owl.carousel'); $carousel.removeClass('owl-loaded owl-carousel-init manually-loaded'); $sectionThis.trigger('module_layout_categories.shown', [$category.data('categories-filter')]); }); }); }
} jQuery(function ($) { TestimonialsModuleInitialize_Layout1_Layout8_Layout9(); }); function TestimonialsModuleInitialize_Layout1_Layout8_Layout9() {
    $(document).on("s123.page.ready", function (event) {
        var $sections = $('.s123-module-testimonials.layout-1, .s123-module-testimonials.layout-8, .s123-module-testimonials.layout-9'); $sections.each(function (index) {
            var $s = $(this); var $carousel = $s.find('[data-ride="carousel"]'); var layout_customize = $s.find('.layout-customize').length > 0 ? tryParseJSON($s.find('.layout-customize').val()) : ''; var testimonialsInterval = 10000; if (layout_customize != '') { testimonialsInterval = layout_customize.testimonialsInterval * 1000; }
            $carousel.carousel({ interval: isMobile.any() ? false : testimonialsInterval }); $carousel.find('.carousel-control.left').click(function () { $carousel.carousel('prev'); }); $carousel.find('.carousel-control.right').click(function () { $carousel.carousel('next'); }); $carousel.find('.carousel-indicators li').click(function () { $carousel.carousel($(this).data('slide-to')); });
        });
    }); $(document).on("s123.page.load", function (event) { setTestimonialsHeight(); }); if (IsWizard()) { $(document).on('wizard.preview.device.changed', function (event) { setTestimonialsHeight(); }); }
    function setTestimonialsHeight() { var $sections = $('.s123-module-testimonials.layout-1, .s123-module-testimonials.layout-8, .s123-module-testimonials.layout-9'); $sections.each(function (index) { var $s = $(this); var $carousel = $s.find('[data-ride="carousel"]'); $carousel.find('.item, .testimonial-image').css({ minHeight: '' }); if (!IsIE11()) { var selector = $s.hasClass('layout-8') && findBootstrapEnvironment() !== 'xs' ? '.testimonial-image' : '.item'; $carousel.find(selector).css({ minHeight: Math.max.apply(Math, $carousel.find('.item').map(function () { return $(this).outerHeight(); })) }); } }); }
} jQuery(function ($) { TestimonialsModuleInitialize_Layouts(); }); function TestimonialsModuleInitialize_Layouts() { $(document).on("s123.page.ready", function (event) { var $sections = $('.s123-module-testimonials'); $sections.each(function (index) { var $s = $(this); var $categories = $s.find('.testimonials-category'); var categories = new ModuleLayoutCategories({ $items: $s.find('.testimonials-category'), $categoriesContainer: $s.find('.categories-panel'), $filterButton: $s.find('.items-responsive-filter'), $categories: $s.find('.items-categories-container li') }); }); }); } function Comments_Initialize(settings) {
    var that = this; var $s123CommentsContainer = $('#' + settings.id); var $commentsForm = $s123CommentsContainer.find('.commentsForm'); var $commentsContainer; var Rating = {}; var submitMessage = {}; var hasRating = false; that.onLoad = settings.onLoad; that.onFormSubmit = settings.onFormSubmit; switch (settings.type) { case 0: $commentsContainer = $s123CommentsContainer.find('#commentsContainer'); submitMessage.title = translations.sent; submitMessage.message = translations.blogReviewMessage; break; case 1: $commentsContainer = $s123CommentsContainer.find('#commentsContainer'); hasRating = true; break; default: return; break; }
    that.init = function () { that.loadComments(false); }; that.showSubcomments = function (subComments, $commentsContainer) { $.each(subComments, function (index, comment) { var $parentComments = $commentsContainer.find('.commentBox'); $.each($parentComments, function (index, parentComment) { if ($(this).data('comment-id') == comment.parentID) { $(parentComment).find('.sub-comments-div').append(that.comment_HTML(comment.title, comment.time, comment.message)); } }); }); }; that.comment_HTML = function (title, time, message) { var html = ''; html += '<div class="sub-comments-div-box">'; html += '<h4 class="title">' + title + '</h4>'; html += '<small class="time">' + time + '</small><br/>'; html += '<div class="message">' + message + '</div>'; html += '</div>'; return html; }; that.submitHandler = function ($form) {
        var forms_GoogleRecaptcha = new Forms_GoogleRecaptcha(); forms_GoogleRecaptcha.init($form); $form.validate({ errorElement: 'div', errorClass: 'help-block', focusInvalid: true, ignore: "", highlight: function (e) { $(e).closest('.form-group').removeClass('has-info').addClass('has-error'); }, success: function (e) { $(e).closest('.form-group').removeClass('has-error'); $(e).remove(); } }); $form.off('submit.commentsForm').off('submit.commentsForm').on('submit.commentsForm', function (event) {
            event.preventDefault(); if (hasRating) { var formValid = $form.valid(); var ratingValid = Rating.valid(); if (!formValid || !ratingValid) return; } else { if (!$form.valid()) return; }
            if (forms_GoogleRecaptcha.isActive && !forms_GoogleRecaptcha.isGotToken) { forms_GoogleRecaptcha.getToken(); return false; }
            $form.find('.blogSubmitButton').prop('disabled', true); $form.find('.blogSubmitButton').html(S123.s123IconToSvg.getHtml('spinner', 'fa-spin', '')); $.ajax({
                type: "POST", url: "/versions/" + $('#versionNUM').val() + "/wizard/comments/addShowComments.php", data: $form.serialize(), success: function (data) {
                    var dataObj = tryParseJSON(data); if (dataObj.blockComment == '1') { that.showManagerApproveMessage(); }
                    that.loadComments(data.commentsHtml); $form.trigger('reset'); forms_GoogleRecaptcha.reset(); $form.find('.blogSubmitButton').prop('disabled', false); $form.find('.blogSubmitButton').html($form.find('.blogSubmitButton').data('text')); WizardNotificationUpdate(); if (that.onFormSubmit) that.onFormSubmit.call(this, dataObj.newCommentID, dataObj.blockComment);
                }
            }); return false;
        });
    }; that.showManagerApproveMessage = function () { if (!submitMessage.message) return; bootbox.alert({ title: submitMessage.title, message: submitMessage.message, className: 'contactUsConfirm', buttons: { ok: { label: translations.Ok } }, backdrop: true }); }; that.showReplyModal = function (t, childForm) { var x = ''; x += '<form class="row" method="post" style="margin:0px;">'; x += '<div class="col-xs-12 col-sm-12">'; x += '<div class="form-group">'; x += '<textarea class="form-control comment_message" name="comment_message" placeholder="' + t.data('tran-comment') + '" style="min-height: 150px;" required data-msg-required="' + t.data('tran-this-field-is-required') + '"></textarea>'; x += '</div>'; x += '<div class="row">'; x += '<div class="col-xs-12 col-sm-6">'; x += '<div class="form-group">'; x += '<input type="text" name="contact_name" placeholder="' + t.data('tran-name') + '" class="form-control" required data-msg-required="' + t.data('tran-this-field-is-required') + '">'; x += '</div>'; x += '</div>'; x += '<div class="col-xs-12 col-sm-6">'; x += '<div class="form-group">'; x += '<input type="text" name="contact_email" placeholder="' + t.data('tran-email-address') + '" class="form-control" required data-msg-required="' + t.data('tran-this-field-is-required') + '" data-rule-email="true" data-msg-email="' + t.data('tran-please-enter-valid-email') + '">'; x += '</div>'; x += '</div>'; x += '</div>'; x += '<div class="text-center">'; x += '<button type="submit" class="btn btn-primary blogSubmitButton" data-text="' + t.data('tran-post-reply') + '">' + t.data('tran-post-reply') + '</button>'; x += '</div>'; x += '<div class="text-center">'; x += '<small>* ' + t.data('tran-the-email-will-not-be-published-on-the-website') + '</small>'; x += '</div>'; x += '</div>'; x += '<input type="hidden" name="w" value="' + t.data('hidden-w') + '">'; x += '<input type="hidden" name="websiteID" value="' + t.data('hidden-website-id') + '">'; x += '<input type="hidden" name="uniquePageID" value="' + t.data('hidden-unique-page-id') + '">'; x += '<input type="hidden" name="moduleID" value="' + t.data('module-id') + '">'; x += '<input type="hidden" name="moduleTypeNUM" value="' + t.data('module-type') + '">'; x += '<input type="hidden" name="tranW" value="' + websiteLanguageCountryFullCode + '">'; x += '<input type="hidden" class="commentTo" name="commentTo" value="' + t.data('hidden-comment-to') + '">'; x += '<input type="hidden" name="act" value="addShow">'; x += '</form>'; childForm.html(x); that.submitHandler(childForm.find('form')); }; Rating = new function () {
        var R = this; R.init = function (settings) { if (!settings.hasRating) return; R.$form = settings.$form; R.$input = settings.$input; R.$json = settings.$json; if (R.$form.length === 0) return; R.$raty = R.$form.find('.rating-plugin'); R.$raty.raty({ starType: 'i', cancel: false, number: 5, hints: R.getHints(), starHalf: (IsIE11() ? 'fa fa-star-half star-half' : 'star-half svg-m'), starOff: (IsIE11() ? 'fa fa-star-o star-o' : 'star-o svg-m'), starOn: (IsIE11() ? 'fa fa-star star' : 'star svg-m'), click: function (rating, event) { R.$input.val(rating); R.valid(); } }); }; R.getHints = function () { var json = tryParseJSON(R.$json.val()); if (!json) { return hints = [translations.reviewBad, translations.reviewPoor, translations.reviewRegular, translations.reviewGood, translations.reviewGorgeous]; } else { return hints = json.hints; } }; R.valid = function () {
            var valid = $.isNumeric(R.$input.val()) && parseInt(R.$input.val()) > 0; var $parent = R.$raty.closest('.form-group'); $parent.removeClass('.has-error'); $parent.find('#ratingError').remove(); if (!valid) { $parent.addClass('has-error'); $parent.append('<div id="ratingError" class="text-center help-block">' + R.$raty.data('msg-required') + '</div>'); }
            return valid;
        };
    }; that.loadComments = function (commentsHtml) {
        if (!commentsHtml) { loadCommentsByAjax(); } else { addCommentsToPage(commentsHtml); }
        $commentsForm.find('.blogCommentsBox #comment_message').focus(function () { $commentsForm.find('.blogCommentsBox').addClass('active'); }); that.submitHandler($commentsForm); Rating.init({ $form: $commentsForm, $input: $commentsForm.find('.rating'), $json: $commentsForm.find('.rating-plugin-data'), hasRating: hasRating });
    }; function loadCommentsByAjax() { $.ajax({ type: "POST", url: '/versions/' + $('#versionNUM').val() + '/wizard/comments/addShowComments.php', data: { w: $('#w').val(), websiteID: $('#websiteID').val(), disableCssFiles: 1, moduleID: $commentsContainer.data('module-id'), moduleTypeNUM: $commentsContainer.data('module-type-num'), uniquePageID: $commentsContainer.data('unique-page-id'), tranW: $commentsContainer.data('tran-w'), act: $commentsContainer.data('action') }, success: function (data) { data = tryParseJSON(data); if (!data) return; addCommentsToPage(data.commentsHtml); } }); }
    function addCommentsToPage(commentsHtml) {
        $commentsContainer.html(commentsHtml); $commentsContainer.find('.blog-reply-to').each(function (index, replyLink) {
            $(replyLink).off('click').on('click', function () {
                $childForm = $(this).closest('.commentBox').find('.blogReplyForm'); if ($childForm.hasClass('hidden')) { that.showReplyModal($(this), $childForm); $childForm.removeClass('hidden'); $(this).html($(this).data('text-hide')); } else { $childForm.addClass('hidden'); $(this).html($(this).data('text-reply')); }
                $childForm.find('.comment_message').select();
            });
        }); var subComments = tryParseJSON($commentsContainer.find('.sub-comments').html()); that.showSubcomments(subComments, $commentsContainer); if (hasRating) { if (that.onLoad) that.onLoad.call(this, $commentsContainer.find('.commentBox').length, $commentsContainer.find('#reviewAvg').val(), false); }
    }
    that.init();
}// Run when the page ready (before images and other resource)
jQuery(function ($) { MultiCurrencies.init(); ActiveOrderPopup.init(); WishList.init(); }); var MultiCurrencies = function () {
    var that = { nameSpace: 'multi-currencies', isActive: false, isChangedCurrency: false }; that.init = function () {
        $(document).on('s123.page.ready.multi_currencies', function (event) {
            that.settings = tryParseJSON($('.s123-multi-currencies').val()); if (!that.settings) return; if (!that.settings.active) return; that.activeCurrency = tryParseJSON($.cookie($(websiteID).val() + '-' + that.nameSpace)); that.defaultCurrency = that.settings.defaultCurrency; that.currencies = that.settings.currencies; that.setActiveCurrency(that.activeCurrency.currency); that.$menuIcon = $('[data-toggle="multiCurrenciesPopup"]'); that.isActive = true; $(document).off('build_popup.open.multi_currencies').on('build_popup.open.multi_currencies', function (event) { handleMenuIcon($('#popupFloatDivMenu [data-toggle="multiCurrenciesPopup"]'), true); }); handleMenuIcon(that.$menuIcon, false); that.priceOnlyType.backup(); $(document).off('pageLoaded.multi_currencies').on('pageLoaded.multi_currencies', function (event) {
                if ($.isNumeric(S123.QueryString.clientZone)) { $('.client-zone-orders-table [data-rel="multiCurrency"]').removeAttr('data-rel'); }
                if (isDefaultCurrency() && that.isChangedCurrency) { that.reset(); } else if (isDefaultCurrency() && !that.isChangedCurrency) { $('[data-rel="multiCurrency"]').css({ visibility: 'visible' }); } else { updateAllPrices(); }
            }); if ($.isNumeric(S123.QueryString.clientZone)) return; $(document).off('s123.pjax.complete.multi_currencies').on('s123.pjax.complete.multi_currencies', function () { that.$menuIcon = $('[data-toggle="multiCurrenciesPopup"]'); handleMenuIcon(that.$menuIcon, false); that.priceOnlyType.backup(); $(document).trigger('pageLoaded.multi_currencies'); }); $(document).off('multi_currencies_price_update').on('multi_currencies_price_update', function (event, settings) { $.each(settings, function (index, setting) { if (!isDefaultCurrency()) { updatePrice(setting.el, setting.newPrice, true); } else { setting.el.find('[data-rel="multiCurrency"]').css({ visibility: 'visible' }); } }); }); $(document).trigger('pageLoaded.multi_currencies'); modulesExtraActions(); $(document).off('multi_currency_update').on('multi_currency_update', function () { buildPopup_CloseAction('popupFloatDivMenu'); });
        });
    }; that.setActiveCurrency = function (currency) {
        that.activeCurrency = that.currencies[currency]; if (!that.activeCurrency) { that.activeCurrency = that.defaultCurrency; }
        $.cookie($(websiteID).val() + '-' + that.nameSpace, JSON.stringify(that.activeCurrency), { expires: 365, path: '/' });
    }; that.reset = function () { if (!that.isActive) return; if (getOrderScreen() > 1) return; $('[data-rel="multiCurrency"]').each(function (index, el) { var originalPrice = $(this).find('[data-type="price"]').data(that.nameSpace + '-price'); var $price = $(showPrice(that.defaultCurrency.data, originalPrice)); $(this).replaceWith($price); $price.css({ visibility: 'visible' }); backUpPrice($price.find('[data-type="price"]'), $price.find('[data-type="price"]').html(), false); }); $('[data-multi-currency-symbol-only="true"]').html(that.defaultCurrency.data.symbol); that.priceOnlyType.update(); that.isChangedCurrency = false; }; that.geConvertedPrice = function (price) { if (!that.isActive) return price; if (!$.isNumeric(price)) return price; if (isDefaultCurrency()) return price; if (getOrderScreen() > 1) return price; var result = parseFloat(price) * parseFloat(that.activeCurrency.rate); return result > 0 ? result.toFixed(2) : result; }; that.getMobileIconHtml = function () { var $clone = that.$menuIcon.clone(); $clone.attr('data-is-mobile', true); return $clone.prop('outerHTML'); }; function handleMenuIcon($menuIcon, isMobileMenu) {
        setMenuIconCurrency($menuIcon); var html = ''; var maxHeight = 160; html += '<div class="currency-menu-container fancy-scrollbar" style="max-height:' + maxHeight + 'px;">'; html += '<div class="currency-list">'; html += '<div class="currency-list-item" data-value="' + S123.escapeHtml(that.defaultCurrency.currency) + '">'; html += '<a href="#">'; html += '<span>' + that.defaultCurrency.currency + '</span>'; html += '<span>-</span>'; html += '<span>' + that.defaultCurrency.data.symbol + '</span>'; html += '</a>'; html += '</div>'; $.each(that.currencies, function (currencyCode, currency) { html += '<div class="currency-list-item" data-value="' + S123.escapeHtml(currencyCode) + '">'; html += '<a href="#">'; html += '<span>' + currencyCode + '</span>'; html += '<span>-</span>'; html += '<span>' + currency.data.symbol + '</span>'; html += '</a>'; html += '</div>'; }); html += '</div>'; html += '</div>'; $html = $(html); setActiveCurrencyListItem($html); $html.find('.currency-list').on('click.multi_currencies', 'a', function (event) {
            event.preventDefault(); if (!isDefaultCurrency()) { that.isChangedCurrency = true; } else { that.isChangedCurrency = false; }
            that.setActiveCurrency($(this).parent().data('value')); $(document).trigger('pageLoaded.multi_currencies'); modulesExtraActions(); setMenuIconCurrency($menuIcon); $menuIcon.popover('hide'); setActiveCurrencyListItem($html); $(document).trigger('multi_currency_update', [that.activeCurrency]);
        }); S123.popOver.init({ $el: $menuIcon, elSelector: '.multi-currencies-controller', namespace: 'multi_currency_menu_icon', oneTimeUsage: false, popOverSettings: { selector: 'multi-currency', content: $html, html: true, trigger: 'manual', template: '<div class="popover multi-currency" role="tooltip"><div class="arrow"></div><div data-menu-dismiss="popover"><i class="fa fa-times" aria-hidden="true"></i></div><div class="popover-content"></div></div>', placementCallBack: function () { if (isMobileMenu) return 'top'; if (getWebsiteMenuPosition() === 'top' || getWebsiteMenuPosition() === 'bottom') { if (($('nav#mainNav').offset().top - $(window).scrollTop()) > maxHeight) { return 'top'; } else { return 'bottom'; } } else { if ($('html').attr('dir') === 'rtl') { return 'left'; } else { return 'right'; } } } } }); $(document).on('s123_pop_over_wrapper.show.multi_currency_menu_icon', function () { $menuIcon.addClass('active'); })
            .on('s123_pop_over_wrapper.hide.multi_currency_menu_icon', function () { $menuIcon.removeClass('active'); }); $menuIcon.off('click.multi_currencies').on('click.multi_currencies', function () { if ($(this).hasClass('active')) { $menuIcon.popover('hide'); } else { $menuIcon.popover('show'); } });
    }
    function setActiveCurrencyListItem($currencyList) { $currencyList.find('.currency-list-item').removeClass('active'); $currencyList.find('.currency-list-item[data-value="' + that.activeCurrency.currency + '"]').addClass('active'); }
    function setMenuIconCurrency($menuIcon) {
        var html = ''; if ($menuIcon.data('is-mobile')) { html += '<span>' + that.activeCurrency.currency + '</span>'; } else { html += '<span>' + that.activeCurrency.currency + '</span>'; html += '<span>' + that.activeCurrency.data.symbol + '</span>'; if (getWebsiteMenuPosition() === 'top' || getWebsiteMenuPosition() === 'bottom') { html += S123.s123IconToSvg.getHtml('caret-down', 'mc-icon', ''); } else { if ($('html').attr('dir') === 'rtl') { html += S123.s123IconToSvg.getHtml('caret-left', 'mc-icon', ''); } else { html += S123.s123IconToSvg.getHtml('caret-right', 'mc-icon', ''); } } }
        $menuIcon.html(html);
    }
    function updateAllPrices() {
        if (isDefaultCurrency() && that.isChangedCurrency) { that.reset(); } else if (isDefaultCurrency() && !that.isChangedCurrency) { $('[data-rel="multiCurrency"]').css({ visibility: 'visible' }); } else { $('[data-rel="multiCurrency"]').each(function (index, el) { updatePrice($(this), $(this).find('[data-type="price"]').html(), false); }); }
        $('[data-multi-currency-symbol-only="true"]').html(that.activeCurrency.data.symbol); that.priceOnlyType.update();
    }
    function updatePrice($el, newPrice, force) { backUpPrice($el.find('[data-type="price"]'), newPrice, force); if (isReplaceDisabled()) { $el.css({ visibility: 'visible' }); } else { var $price = $el.find('[data-type="price"]'); var priceAsString = $price.data(that.nameSpace + '-price'); var price = parseFloat(priceAsString); var $newEl = $(showPrice(that.activeCurrency.data, (price * parseFloat(that.activeCurrency.rate)).toFixed(2))); backUpPrice($newEl.find('[data-type="price"]'), priceAsString, false); $price.parent().replaceWith($newEl); $newEl.css({ visibility: 'visible' }); } }
    function backUpPrice($el, newPrice, force) { if (!that.isActive) return; if (!$el.data(that.nameSpace + '-price') || force) { $el.data(that.nameSpace + '-price', newPrice); } }
    function modulesExtraActions() { $(document).off('donate_price_update.multi_currencies').on('donate_price_update.multi_currencies', function (event, $el) { if (isDefaultCurrency()) return; var price = $el.val(); price = parseFloat(price) * parseFloat(that.activeCurrency.rate); $el.val(price.toFixed(2)); }); }
    function isDefaultCurrency() { return that.defaultCurrency.currency === that.activeCurrency.currency; }
    function isReplaceDisabled() {
        if (getOrderScreen() > 1) { return true; } else { return false; }
        return false;
    }
    function getOrderScreen() { var path = window.location.pathname.split("/"); var orderScreen = path[path.length - 2]; if (orderScreen == '-order1') return 1; if (orderScreen == '-order2') return 2; if (orderScreen == '-order3') return 3; return 0; }
    that.priceOnlyType = {
        backup: function () { $('[data-multi-currency-price-only="true"]').each(function (index, el) { $(this).data(that.nameSpace + '-price', $(this).html()); }); }, update: function () {
            $('[data-multi-currency-price-only="true"]').each(function (index, el) {
                var originalPrice = $(this).data(that.nameSpace + '-price'); var newPrice = parseFloat(originalPrice) * parseFloat(that.activeCurrency.rate)
                $(this).html(newPrice.toFixed(2));
            });
        }
    }; return that;
}(); var ActiveOrderPopup = function () {
    AO = {}; AO.init = function () { $(document).on('s123.page.ready.activeOrderPopup', function (event) { AO.initializeAddToCart(); AO.productCallToAction.init(); AO.initializeShowCart(); }); }; AO.initializeAddToCart = function () {
        $('.orderButtonPopup').off('click').on('click', function (event) {
            var $this = $(this); if ($this.data('disable-atc-validator') != '1') { if (!AO.atcValidator()) return; }
            $this.attr('disabled', ''); S123.ButtonLoading.start($this); var multiProducts = $this.data('multi-products') ? $this.data('multi-products') : JSON.stringify([$this.data('unique-page')]); var formData = new FormData(); formData.append('w', $('#w').val()); formData.append('websiteID', $('#websiteID').val()); formData.append('moduleID', $this.data('module')); if ($this.data('product-page')) {
                if ($('#productOptions').prop('type') == 'textarea') { formData.append('productOptions', $('#productOptions').length !== 0 ? $('#productOptions').html() : ''); } else { formData.append('productOptions', $('#productOptions').length !== 0 ? $('#productOptions').val() : ''); }
                formData.append('customText', $('#customText').length !== 0 ? $('#customText').html() : '');
            }
            formData.append('amount', $this.data('quantity-amount') ? $this.data('quantity-amount') : '1'); formData.append('multiProducts', multiProducts); $('input[type="file"]').each(function (index, upload) { if (upload.files.length > 0) { formData.append(upload.id, upload.files[0]); } }); $.ajax({ type: "POST", url: "/versions/" + $('#versionNUM').val() + "/wizard/orders/front/addToCart.php", data: formData, cache: false, contentType: false, processData: false, success: function (response) { response = tryParseJSON(response); showCart_GetContent('/versions/' + $('#versionNUM').val() + '/wizard/orders/front/showCart.php?w=' + $('#w').val() + '&websiteID=' + $('#websiteID').val() + '&tranW=' + websiteLanguageCountryFullCode + '&moduleID=' + $this.data('module'), true); CartCounter.updateCartIcon(); S123.ButtonLoading.stop($this); $this.removeAttr('disabled'); topWindow.eCommerce_cart_lastAdded = response.updatedCartIds ? response.updatedCartIds : false; } });
        });
    }; AO.initializeShowCart = function () { $('.orderOpenCart').off('click').on('click', function (event) { AO.showCart(); }); }; AO.showCart = function () { showCart_GetContent('/versions/' + $('#versionNUM').val() + '/wizard/orders/front/showCart.php?w=' + $('#w').val() + '&websiteID=' + $('#websiteID').val() + '&moduleTypeNUM=37&tranW=' + websiteLanguageCountryFullCode + '&cartButton=1', true); }; AO.atcValidator = function () {
        var $ct = $("#product-custom-text"); var $po = $('.product-options'); if ($ct.length !== 0 && $ct.data('mandatory')) { var $ct_fieldTitle = $('#ct_fieldTitle'); if ($ct_fieldTitle.val().length === 0) { $ct_fieldTitle.popover({ container: 'body', content: translations.productvalidatorPopover, trigger: 'manual', template: '<div class="popover product-validator-popover" role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>', placement: function (popover, input) { return isMobile.any() ? 'auto' : ($('html').attr('dir') === 'rtl' ? 'left' : 'right'); } }); $ct_fieldTitle.popover('show').one('input', function (e) { $(this).popover('hide'); }); $ct_fieldTitle.focus(); return false; } }
        if ($po.length !== 0) {
            var $options = $po.find('.p-o-container[data-mandatory="1"]'); var addToCart = true; var $popoverContainer; var $firstErrorOption; var $errorsOptionsList = []; $.each($options, function (index, option) {
                var $option = $(option); var addErrorMsg = false; switch ($option.data('type')) {
                    case 'color': case 'radio': case 'checkbox': case 'size': case 'list': if ($option.find('[id*=poi].selected').length === 0) { addToCart = false; addErrorMsg = true; }
                        $popoverContainer = $(option); break; default: if ($option.find('.fake-input').length > 0) { var id = $option.find('.fake-input').data('related-id'); if ($option.find('[data-id="' + id + '"]').val().length === 0) { addToCart = false; addErrorMsg = true; $popoverContainer = $(option).parent(); } } else { if ($option.find('.form-control').val().length === 0) { addToCart = false; addErrorMsg = true; $popoverContainer = $(option).parent(); } }
                }
                if (addErrorMsg) { $errorsOptionsList.push($option); var $popover = $option.find('.p-o-popover-box'); if ($popover.length === 0) $popover = $option; $popover.popover({ container: 'body', content: translations.productvalidatorPopover, trigger: 'manual', template: '<div class="popover product-validator-popover" role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>', placement: function (popover, input) { return isMobile.any() ? 'auto' : ($('html').attr('dir') === 'rtl' ? 'right' : 'left'); } }); }
            }); if ($errorsOptionsList.length !== 0) {
                var offset = $('#mainNav').outerHeight(); if (!$.isNumeric(offset)) offset = 0; if (!elementInViewport($errorsOptionsList[0].get(0))) { $('html, body').scrollTop($errorsOptionsList[0].offset().top - offset); }
                $.each($errorsOptionsList, function (index, $option) { var $popover = $option.find('.p-o-popover-box'); if ($popover.length === 0) $popover = $option; $popover.popover('show'); }); $po.off('po.update').on('po.update', function (event) { $('.product-validator-popover').popover('hide'); });
            }
            return addToCart;
        }
        return true;
    }; AO.productCallToAction = function () {
        var _ = {}; _.init = function (settings) {
            _.$controllers = $('.orderButtonPopup[data-p-c-t-a]'); if (_.$controllers.length == 0) return; _.$controllers.each(function () {
                var $this = $(this); var callToAction = $this.data('p-c-t-a'); if (callToAction.type == 'externalLink' && callToAction.externalLink.length > 0) { $this.off('click').on('click', function (event) { window.open(callToAction.externalLink, '_blank'); }); } else if (callToAction.type == 'contactUs') {
                    $this.off('click').on('click', function (event) {
                        buildPopup('popupFloatDivSearch', '', generateContactForm(callToAction), '', true, true, true, 'right', '')
                        S123.globalContactEmail.submitHandler(); fillDescription(callToAction);
                    });
                }
            });
        }; function generateContactForm(callToAction) { var html = ''; html += '<div class="global-contact-email-container">'; html += '<div class="g-c-email-info-box">'; html += '<h3>' + translations.productCallToAction.title + '</h3>'; html += '<p>' + translations.productCallToAction.infoBox + '</p>'; html += '</div>'; html += '<form class="g-c-email-form">'; html += '<div class="row">'; html += '<div class="col-xs-12">'; html += '<div class="form-group">'; html += '<label for="emailForm_fullName" class="white">' + translations.productCallToAction.fullName + '</label>'; html += '<input type="text" name="emailForm_fullName" placeholder="' + translations.productCallToAction.fullName + '" class="form-control" required data-msg-required="' + translations.jqueryValidMsgRequire + '">'; html += '</div>'; html += '</div>'; html += '<div class="col-xs-12">'; html += '<div class="form-group">'; html += '<label for="emailForm_email" class="white">' + translations.emailAddress + '</label>'; html += '<input type="text" name="emailForm_email" placeholder="' + translations.emailAddress + '" class="form-control" required data-msg-required="' + translations.jqueryValidMsgRequire + '" data-rule-email="true" data-msg-email="' + translations.jqueryValidMsgEmail + '">'; html += '</div>'; html += '</div>'; html += '<div class="col-xs-12">'; html += '<div class="form-group">'; html += '<label for="emailForm_phone" class="white">' + translations.productCallToAction.phone + '</label>'; html += '<input type="text" name="emailForm_phone" placeholder="' + translations.productCallToAction.phone + '" class="form-control">'; html += '</div>'; html += '</div>'; html += '</div>'; html += '<div class="row">'; html += '<div class="col-xs-12">'; html += '<button type="submit" class="btn btn-primary btn-block">' + translations.send + '</button>'; html += '<input type="hidden" name="websiteID" value="' + $('#websiteID').val() + '">'; html += '<input type="hidden" name="w" value="' + $('#w').val() + '">'; html += '<input type="hidden" name="isAddToCartBtn" value="1">'; html += '<input type="hidden" name="recaptchaToken" value="">'; html += '<textarea class="form-control hidden" name="emailForm_description"></textarea>'; html += '</div>'; html += '</div>'; html += '</form>'; html += '<div class="g-c-email-message-sent-box">'; html += '<div class="row">'; html += '<div class="col-sm-6 col-xs-12 col-md-offset-3">'; html += '<h3 class="g-c-email-message-content">' + translations.productCallToAction.thankYouMessage + '</h3>'; html += '</div>'; html += '</div>'; html += '<div class="row">'; html += '<div class="col-sm-6 col-xs-12 col-md-offset-3">'; html += '<button type="button" class="btn btn-primary close-order-thank-you">' + translations.productCallToAction.thankYouCloseBtn + '</button>'; html += '</div>'; html += '</div>'; html += '</div>'; html += '</div>'; return html; }
        function fillDescription(callToAction) {
            var pageURL = window.location.protocol + '//' + domain + callToAction.pageURL;
            var html = ''; html += '<br>'; html += '<strong>' + translations.productCallToAction.productName + '<strong> '; html += '<a href="' + pageURL + '" target="_blank">' + callToAction.title + '</a>'; $('#popupFloatDivSearch [name="emailForm_description"]').val(html);
        }
        return _;
    }(); return AO;
}(); var WishList = function () {
    var WL = {}; WL.init = function (settings) { $(document).on('s123.page.ready.wish_list', function (event) { WL.websiteID = $('#websiteID').val(); WL.$menuButton = $('.wishListActionButton'); if (WL.$menuButton.length === 0) return; WL.eventRecurring(); WL.initilizeMenuButton(); WL.initializeLayoutButtons(); WL.initializeDataPageButtons(); }); }; WL.markUnMarkIcons = function () { var $container = $('.s123-module-eCommerce'); var $items = $container.find('.product-data-obj'); var $icons = $items.find('.wish-list-btn'); WL.items = tryParseJSON($.cookie(WL.websiteID + '-wishList')); if (!WL.items || $container.length === 0) return; $icons.removeClass('wl-active'); $.each(WL.items, function (index, item) { $items.filter('.product-data-obj[data-unique-id="' + item.uniqueID + '"]').find('.wish-list-btn').addClass('wl-active'); }); if ($container.hasClass('s123-page-data-eCommerce')) { WL.setToolTip($container); } }; WL.setToolTip = function ($container) { var $wishListBtn = $container.find('.wish-list-btn'); $wishListBtn.attr('data-original-title', $wishListBtn.data('add-tooltip')); $wishListBtn.filter('.wl-active').attr('data-original-title', $wishListBtn.data('remove-tooltip')); $wishListBtn.tooltip({ container: 'body', placement: 'auto' }); }; WL.eventRecurring = function () { WL.markUnMarkIcons(); WL.updateCounterIcon(); }; WL.refresh = function () { WL.eventRecurring(); }; WL.initilizeMenuButton = function () { if (WL.$menuButton.length === 0) return; WL.$menuButton.off('click').on('click', function (event) { var $this = $(this); showCart_GetContent('/versions/' + $('#versionNUM').val() + '/wizard/orders/front/showCart.php?w=' + $('#w').val() + '&websiteID=' + $('#websiteID').val() + '&moduleTypeNUM=112&tranW=' + websiteLanguageCountryFullCode + '&cartButton=1&wishList=true', true); }); }; WL.initializeLayoutButtons = function () { var $container = $('.s123-module-eCommerce:not(.s123-page-data-eCommerce)'); if ($container.length === 0) return; $container.find('.wish-list-btn').off('click.wishList').on('click.wishList', function (event) { event.stopPropagation(); var $this = $(this); var $wishListItem = $this.closest('.product-data-obj'); if ($this.hasClass('disabled')) return false; if ($this.hasClass('wl-active')) { WL.removeItem($this, $wishListItem.data('module'), $wishListItem.data('module-type-num'), $wishListItem.data('unique-id')); } else { WL.addItem($this, $wishListItem.data('module'), $wishListItem.data('unique-id')); } }); }; WL.initializeDataPageButtons = function () { var $container = $('.s123-module-eCommerce.s123-page-data-eCommerce'); if ($container.length === 0) return; $container.find('.wish-list-btn').off('click.wishList').on('click.wishList', function (event) { var $this = $(this); var $wishListItem = $this.closest('.product-data-obj'); if ($this.hasClass('disabled')) return false; if ($this.hasClass('wl-active')) { WL.removeItem($this, $wishListItem.data('module'), $wishListItem.data('module-type-num'), $wishListItem.data('unique-id')); } else { WL.addItem($this, $wishListItem.data('module'), $wishListItem.data('unique-id')); } }); }; WL.addItem = function ($item, moduleID, uniqueID) { $item.addClass('disabled'); $.ajax({ type: "POST", url: "/versions/" + $('#versionNUM').val() + "/wizard/orders/front/addToCart.php", data: { w: $('#w').val(), websiteID: WL.websiteID, moduleID: moduleID, wishList: true, multiProducts: JSON.stringify(Array(uniqueID)), }, success: function (response) { response = tryParseJSON(response); showCart_GetContent('/versions/' + $('#versionNUM').val() + '/wizard/orders/front/showCart.php?w=' + $('#w').val() + '&websiteID=' + $('#websiteID').val() + '&tranW=' + websiteLanguageCountryFullCode + '&moduleID=' + moduleID + '&wishList=true', true); WishList.eventRecurring(); $item.removeClass('disabled'); topWindow.eCommerce_cart_lastAdded = response.updatedCartIds ? response.updatedCartIds : false; } }); }; WL.removeItem = function ($item, moduleID, moduleTypeNUM, uniqueID) { $item.addClass('disabled'); $.ajax({ type: "POST", url: "/versions/" + $('#versionNUM').val() + "/wizard/orders/front/removeCartItem.php", data: { w: $('#w').val(), websiteID: WL.websiteID, moduleID: moduleID, id: WL.items[uniqueID].id, uniqueID: uniqueID, wishList: true, cartType: moduleTypeNUM, tranW: websiteLanguageCountryFullCode }, success: function (response) { var response = JSON.parse(response); if (!response.success) return; WishList.eventRecurring(); $item.removeClass('disabled'); topWindow.eCommerce_cart_lastAdded = response.updatedCartIds ? response.updatedCartIds : false; } }); }; WL.updateCounterIcon = function () {
        var $headerWishListWrapper = $('.header-wish-list'); if ($headerWishListWrapper.length === 0) return; var itemsNumber = WL.items ? Object.keys(WL.items).length : 0; if (parseInt(itemsNumber) === 0) {
            if (!$headerWishListWrapper.hasClass('show-static')) { $headerWishListWrapper.hide(); ResetMoreButton(); }
            $headerWishListWrapper.find('.count').hide();
        } else {
            if (!$headerWishListWrapper.hasClass('show-static')) { $headerWishListWrapper.show(); ResetMoreButton(); }
            $headerWishListWrapper.find('.count').html(itemsNumber).css({ display: 'flex' });
        }
    }; return WL;
}(); function showCart_GetContent(url, bsp) {
    var window_object = S123.isWebsiteInSlidingWindow ? parent : window; var b_s_p = window_object.buildSmallPopup; $.ajax({
        type: "GET", url: url, success: function (response) {
            if (bsp) { b_s_p('popupCart', translations.cart, response, '', true, false, true, ''); } else { $('#popupCart .content').html(response); }
            showCart(window_object);
        }
    });
}
function showCart(current_window) {
    var $cartOrderPage = current_window.$('#popupCart').find('.content'); init(); function init() { eventRecurring(); if ($.isArray(topWindow.eCommerce_cart_lastAdded)) { $.each(topWindow.eCommerce_cart_lastAdded, function (index, cart_id) { $cartOrderPage.find('[data-cart-id="' + cart_id + '"]').addClass('last-added-highlight'); }); topWindow.eCommerce_cart_lastAdded = false; } }
    function eventRecurring() {
        current_window.CartCounter.updateCartIcon(); var aop_settings = tryParseJSON($cartOrderPage.find('#aopSettings').val()); $cartOrderPage.height('auto'); $cartOrderPage.find('.quickCart').height($cartOrderPage.height()); $cartOrderPage.find('.empty-cart-btn').off('click').on('click', 'a.empty-cart', function () { $.ajax({ type: "GET", url: $(this).data('href') + '&wishList=' + aop_settings.wishList, success: function (data) { $cartOrderPage.closest('#popupCart .content').html(data); eventRecurring(); showCart_UpdateCartWasChanged(); } }); }); $cartOrderPage.find('.change-cart').on('click', function () { $.ajax({ type: "GET", url: $(this).data('href'), success: function (data) { $cartOrderPage.closest('#popupCart .content').html(data); eventRecurring(); } }); }); $cartOrderPage.find('.continue-shopping-btn, .closeIcon').click(function () { current_window.buildSmallPopup_CloseAction('popupCart'); }); $cartOrderPage.find('.edit-quantity').on('click', function () { var $this = $(this); $cartOrderPage.find('#quantity_box_' + $this.data('product-id') + '').toggle(); }); $cartOrderPage.find('.edit-quantity-minus').on('click', function () { var $this = $(this); var $box = $cartOrderPage.find('#quantity_box_' + $this.data('product-id') + ''); $box.find('.quantity_field').val(parseInt($box.find('.quantity_field').val()) - 1).trigger('input'); }); $cartOrderPage.find('.edit-quantity-plus').on('click', function () { var $this = $(this); var $box = $cartOrderPage.find('#quantity_box_' + $this.data('product-id') + ''); $box.find('.quantity_field').val(parseInt($box.find('.quantity_field').val()) + 1).trigger('input'); }); $cartOrderPage.find('.quantity_field').on('input', function () {
            var $input = $(this); if ($input.val().length === 0) $input.val(1); if (!$.isNumeric($input.val())) $input.val($input.val().replace(/[^0-9]/g, '')); if ($input.val() <= 0) $input.val(1); if (parseInt($input.val()) > parseInt($input.data('inventory-limit'))) { $input.val($input.data('inventory-limit')); showCart_QuantityPopover($cartOrderPage.find('[data-cart-id="' + $input.data('product-id') + '"]'), translations.productQuntityLimit.replace('{{units_limitation}}', $input.data('inventory-limit'))); } else if (parseInt($input.val()) > parseInt($input.data('maximum-purchase'))) { $input.val($input.data('maximum-purchase')); showCart_QuantityPopover($cartOrderPage.find('[data-cart-id="' + $input.data('product-id') + '"]'), translations.productQuntityLimit.replace('{{units_limitation}}', $input.data('maximum-purchase'))); } else if (parseInt($input.val()) < parseInt($input.data('minimum-purchase'))) { $input.val($input.data('minimum-purchase')); showCart_QuantityPopover($cartOrderPage.find('[data-cart-id="' + $input.data('product-id') + '"]'), translations.productQuntityLimitMin.replace('{{units_limitation}}', $input.data('minimum-purchase'))); }
            showCart_UpdateQuantityTotalPrice(); clearTimeout(window.quantityInputFinished); window.quantityInputFinished = setTimeout(function () { $cartOrderPage.find('#q_u_loading_' + $input.data('product-id')).show(); $.ajax({ type: 'POST', url: '/versions/' + aop_settings.versionNUM + '/wizard/orders/front/quantityUpdate.php', data: { w: aop_settings.w, websiteID: aop_settings.websiteID, tranW: aop_settings.tranW, moduleID: aop_settings.moduleID, cartType: aop_settings.cartType, id: $input.data('product-id'), newQuantity: $input.val() }, success: function (response) { var response = JSON.parse(response); if (response.success) { $cartOrderPage.find('#q_u_loading_' + $input.data('product-id')).hide(); current_window.CartCounter.updateCartIcon(); showCart_UpdateCartWasChanged(); } } }); }, 300);
        }); $cartOrderPage.find('.remove-product-btn').off('click').on('click', function () {
            var $this = $(this); $this.parent().children().hide(); $this.parent().append('<div class="loading-primary r-p-loading" class="text-center">' + S123.s123IconToSvg.getHtml('spinner', 'fa-spin', '') + '</div>'); $.ajax({
                type: 'POST', url: '/versions/' + aop_settings.versionNUM + '/wizard/orders/front/removeCartItem.php', data: { id: $this.data('product-id'), uniqueID: $this.closest('.item').get(0).id, w: aop_settings.w, websiteID: aop_settings.websiteID, tranW: aop_settings.tranW, moduleID: aop_settings.moduleID, cartType: aop_settings.cartType, wishList: aop_settings.wishList }, success: function (response) {
                    var response = tryParseJSON(response); if (response.success) {
                        if ($this.closest('.item').siblings().not('.mix-modules-products-buttons').length == 0) { $cartOrderPage.find('.cart-list-container').hide(); $cartOrderPage.find('.empty-cart-container').show(); }
                        $this.closest('.item').fadeOut(300, function () {
                            $this.closest('.item').remove(); showCart_UpdateQuantityTotalPrice(); if (aop_settings.wishList) { WishList.markUnMarkIcons(); WishList.updateCounterIcon(); }
                            showCart_UpdateCartWasChanged();
                        });
                    } else { $cartOrderPage.find('.r-p-loading').remove(); $this.show(); showCart_UpdateQuantityTotalPrice(); }
                    current_window.CartCounter.updateCartIcon();
                }, error: function (data) { $cartOrderPage.find('.r-p-loading').remove(); $this.show(); }
            });
        }); $cartOrderPage.find('#couponWebsite').validate({
            errorElement: 'div', errorClass: 'help-block', focusInvalid: true, ignore: ":hidden", highlight: function (e) { $(e).closest('.form-group').removeClass('has-info').addClass('has-error'); }, success: function (e) { $(e).closest('.form-group').removeClass('has-error'); $(e).remove(); }, errorPlacement: function (error, element) {
                if (element.is('input[type=checkbox]') || element.is('input[type=radio]')) { var controls = element.closest('div[class*="col-"]'); if (controls.find(':checkbox,:radio').length > 1) controls.append(error); else error.insertAfter(element.nextAll('.lbl:eq(0)').eq(0)); }
                else if (element.is('.select2')) { error.insertAfter(element.siblings('[class*="select2-container"]:eq(0)')); }
                else if (element.is('.chosen-select')) { error.insertAfter(element.siblings('[class*="chosen-container"]:eq(0)')); }
                else { error.appendTo(element.closest('.form-group')); }
            }, submitHandler: function (form) { $(form).find('button:submit').prop('disabled', true); return true; }
        }); if (aop_settings.foodDeliveryCart) { foodDeliveryEditProductEvent($cartOrderPage); }
        if (isMobile.any()) { adaptCartHeightOnMobile(aop_settings.wishList); }
        if ($('html.onlyContent123').length > 0) { window.parent.$(window.parent.document).trigger('pageLoaded'); } else { $(document).trigger('pageLoaded'); }
        if (window.location.pathname == '/-order1/') { $(document).off('order1.reload').on('order1.reload', function () { if (typeof window.isCartWasChanged != 'undefined') { delete window.isCartWasChanged; window.location.reload(); } }); }
    }
    function adaptCartHeightOnMobile(isWishList) {
        var offset = isWishList ? '65px' : '280px'; $(window).off('resize.touch_device_scrolling').on('resize.touch_device_scrolling', function () { $cartOrderPage.find('.cartList').attr('style', 'height: calc(' + window.innerHeight + 'px - ' + offset + ');'); })
            .trigger('resize.touch_device_scrolling'); $cartOrderPage.find('.continue-shopping-btn, .closeIcon').click(function () { $(window).off('resize.touch_device_scrolling'); });
    }
    function showCart_QuantityPopover($input, message) { $input.popover({ container: $cartOrderPage, content: message, trigger: 'manual', template: '<div class="popover cart-validator-popover" role="tooltip"><div class="arrow"></div><div class="popover-content"></div></div>', placement: function (popover, input) { return isMobile.any() ? 'auto' : 'bottom'; } }); $input.popover('show'); clearTimeout($input.data('q-p-timeout')); $input.data('q-p-timeout', setTimeout(function () { $input.popover('destroy'); }, 3000)); }
    function showCart_UpdateQuantityTotalPrice() {
        var cartTotal = 0.00; $cartOrderPage.find('.quantity_field').each(function () {
            var $quantityInput = $(this); var $info = $quantityInput.closest('.cart-product-info'); var $priceBox = $info.find('.cart-product-price'); var $price = $info.find('.cart-product-price [data-type="price"]'); var $quantityPrice = $info.find('.quantity-total-price'); var total = (parseFloat($price.closest('[data-price]').data('price')) * parseInt($quantityInput.val())); cartTotal += parseFloat(total); $quantityPrice.find('.main_price [data-type="price"]').html(total.toFixed(2)); if (parseInt($quantityInput.val()) > 1) { $quantityPrice.show(); $priceBox.hide(); } else { $quantityPrice.hide(); $priceBox.show(); }
            $info.find('.cart-product-quantity .qty_count').html($quantityInput.val()); $(document).trigger('multi_currencies_price_update', [[{ el: $quantityPrice.find('.main_price'), newPrice: total.toFixed(2) }]]);
        }); $cartOrderPage.find('#cartTotalPrice [data-type="price"]').html(cartTotal.toFixed(2)); $(document).trigger('multi_currencies_price_update', [[{ el: $cartOrderPage.find('#cartTotalPrice'), newPrice: cartTotal.toFixed(2) }]]);
    }
    function showCart_FixCartContentHeight() { var space = $cartOrderPage.find('.quickCart .header').outerHeight() + $cartOrderPage.find('.quickCart .cartBottom').outerHeight(); $cartOrderPage.find('.quickCart .cartList').css('height', 'calc(100vh - ' + space + 'px)'); }
    function showCart_UpdateCartWasChanged() { window.isCartWasChanged = window.location.pathname == '/-order1/'; }
}// Booking Initialize
function bookingInit($booking) {
    if ($booking.length === 0) return; googleMapPopUp.init({ locationData: $booking.find('.mapPopupActivator'), mapsDisplayDomain: $GLOBALS["maps-display-domain"], longFreeCustomer: longFreeCustomer, language: languageCode }); var rtl = $('html[dir=rtl]').length === 1; var $mainImage = $booking.find('.main-image > div'); var $productOwlcarousel = $booking.find('.bookingOwlcarousel'); $productOwlcarousel.owlCarousel({ autoPlay: false, items: 4, margin: 10, stagePadding: 5, startPosition: 0, loop: false, center: false, nav: true, rtl: rtl, navText: [S123.s123IconToSvg.getHtml('angle-' + (rtl ? 'right' : 'left'), 'fa-2x'), S123.s123IconToSvg.getHtml('angle-' + (rtl ? 'left' : 'right'), 'fa-2x')], dots: true }); $productOwlcarousel.find('.item').click(function () {
        var $clickedImage = $(this).find('.item-image'); var videoPath = ''; if ($clickedImage.data('media-type') == 'video') { videoPath = $clickedImage.data('video-path'); }
        $mainImage.css({ backgroundImage: $clickedImage.css('background-image') });
    }); if ($booking.find(".moduleNameWorkingDays").length == 0) return; var service = JSON.parse($booking.find(".moduleNameWorkingDays").val()); var inActiveDays = 0; $.each(service.businessHours, function (index, dayOfWeek) { if (!dayOfWeek.isActive) { inActiveDays++; } }); if (inActiveDays == 7 && service.fullTime == '') { $booking.find('.note-container').removeClass('hidden'); $booking.find('.calendar-container').addClass('hidden'); return false; }
    if (service.fullTime.length == 0) {
        $.each(service.businessHours, function (index, day) {
            var startShift = 'startTime3'; var endShift = 'endTime3'; if (day.startTime3 == '' || day.endTime3 == '') { startShift = 'startTime2'; endShift = 'endTime2'; }
            if (day.startTime2 == '' || day.endTime2 == '') { startShift = 'startTime1'; endShift = 'endTime1'; }
            if (service.businessHours[index].isActive && !day.hasNoShifts && day[endShift] <= day[startShift]) {
                var startHour = parseInt(day[startShift].substring(0, 2)); var startMin = day[startShift].substring(3, 5); var endHour = parseInt(day[endShift].substring(0, 2)); var endMin = day[endShift].substring(3, 5); service.businessHours[index][endShift] = '23:59'; var dayIndex = (index + 1); if (index == 6) { dayIndex = 0; }
                if (endHour < 10) endHour = '0' + endHour.toString(); service.businessHours[dayIndex].startTime0 = '00:' + startMin; service.businessHours[dayIndex].endTime0 = endHour + ':' + endMin; if (!service.businessHours[dayIndex].isActive) { service.businessHours[dayIndex].isActive = true; service.businessHours[dayIndex].startTime1 = ''; service.businessHours[dayIndex].endTime1 = ''; service.businessHours[dayIndex].startTime2 = ''; service.businessHours[dayIndex].endTime2 = ''; service.businessHours[dayIndex].startTime3 = ''; service.businessHours[dayIndex].endTime3 = ''; service.businessHours[dayIndex].hasNoShifts = true; }
            }
        });
    }
    var disabledDays = ""; if (service.fullTime == 'on') { $.each(service.businessHours, function (index, weekday) { weekday.isActive = true; weekday.startTime1 = '00:00'; weekday.endTime1 = '24:00'; weekday.startTime2 = ''; weekday.endTime2 = ''; weekday.startTime3 = ''; weekday.endTime3 = ''; }); } else {
        var total = service.businessHours.length; $.each(service.businessHours, function (index) {
            if (!service.businessHours[index].isActive) {
                if (service.firstDayOfWeek == '0') { disabledDays += index; } else { disabledDays += (index + 1) % 7; }
                if (index < (total - 1)) { disabledDays += ','; }
            }
        });
    }
    if (disabledDays.slice(-1) === ',') { disabledDays = disabledDays.slice(0, disabledDays.length - 1); }
    var $serviceDatesContainer = $booking.find('.serviceDatesContainer'); var $serviceHourContainer = $booking.find('.serviceHourContainer'); if ($serviceHourContainer.find('.service-hour').length == 0) { $serviceHourContainer.empty().append('<select class="form-control service-hour"></select><label class="hidden no-time-available">' + translations.NoAvailableTime + '</label>'); }
    var $tableHour = $serviceHourContainer.find('.service-hour'); var $bookingForm = $booking.find('.scheduleBookingForm'); var currentDate = $booking.find('.real-input.schedule-booking-date').val(); $booking.find('.real-input.schedule-booking-date').val(currentDate); $bookingForm.submit(function (event) {
        var serviceOrdered = {}; var formValues = getFormValues($(this)); var price = $booking.find('.servicePrice').val(); var title = $booking.find('.serviceTitle').val(); var date = $booking.find('.real-input.schedule-booking-date').val(); var hour = $booking.find('.service-hour').val(); date = changeDateFormat('YYYY-mm-DD ' + service.dateFormat, date); var selectetTime = dayjs(date + ' ' + hour).format("YYYY-MM-DD HH:mm:ss"); if ($('.productPrice').data('price') == 'Free') { price = 0; }
        serviceOrdered.price = price; serviceOrdered.title = title; serviceOrdered.orderDate = selectetTime; $booking.find('.scheduleBookingOrder').val(JSON.stringify(serviceOrdered));
    }); (function () { var bookingCalendar = new calendar_handler(); var $fakeInput = $booking.find('.fake-input.schedule-booking-date'); var $hiddenInput = $booking.find('.real-input.schedule-booking-date'); var $fakeInputIcon = $booking.find('.schedule-booking-date-icon'); bookingCalendar.init({ $fakeInput: $fakeInput, $hiddenInput: $hiddenInput, $fakeInputIcon: $fakeInputIcon, type: 'datePicker', title: translations.chooseDate, calendarSettings: { format: service.dateFormat, weekStart: parseInt(service.firstDayOfWeek), todayBtn: "linked", clearBtn: false, language: languageCode, startDate: $booking.find('.clientTimeByZone').val(), daysOfWeekDisabled: disabledDays, todayHighlight: true }, onInit: function () { refreshBusinessHours(); }, onSubmit: function (selectedDate) { $fakeInput.html(selectedDate); $hiddenInput.val(selectedDate); refreshBusinessHours(); } }); })(); function buildHourSelectBox(shifts) {
        var service = shifts.service; var serviceDurationHour = shifts.serviceDuration.substring(0, 2); var serviceDurationHourMili = parseInt(serviceDurationHour) * 60 * 60 * 1000; var serviceDurationMin = shifts.serviceDuration.substring(3, 5); var serviceDurationMinutesMili = parseInt(serviceDurationMin) * 60 * 1000; var timeBetweenService = parseInt(shifts.timeBetweenService) * 60 * 1000; var serviceInterval = parseInt(service.serviceTimeInterval) * 60 * 1000; var $calendar = shifts.$calendar; var dateFromCalendar = $calendar.val(); dateFromCalendar = changeDateFormat('YYYY-mm-DD ' + service.dateFormat, dateFromCalendar); var $serviceDatesContainer = shifts.$serviceDatesContainer; var $tableHour = shifts.$tableHour; if (!dateFromCalendar) throw 'Missing date parameter'; for (var i = 0; i <= 3; i++) {
            var addShift = false; if (i > 1) { addShift = true; }
            var dayOfWeek = dayjs(dateFromCalendar).day(); if (dayOfWeek == 0) { if (parseInt(service.firstDayOfWeek) == 1) { var dataIndex = 6; } else { var dataIndex = dayOfWeek; } } else { var dataIndex = dayOfWeek - parseInt(service.firstDayOfWeek); }
            var startTime = 'startTime' + i; var endTime = 'endTime' + i; startTime = service.businessHours[dataIndex][startTime]; endTime = service.businessHours[dataIndex][endTime]; if (startTime == '' || endTime == '' || !service.businessHours[dataIndex].isActive)
                continue; var selectedDate = new Date(dateFromCalendar); if (getDateFormat(selectedDate) == getDateFormat(new Date()) && new Date().getTime() >= dayjs(dateFromCalendar + " " + startTime).valueOf()) { startTime = dayjs(dateFromCalendar + " " + $serviceDatesContainer.data('corrent-time')).valueOf(); } else { startTime = dayjs(dateFromCalendar + " " + startTime).valueOf(); }
            endTime = dayjs(dateFromCalendar + " " + endTime).valueOf(); for (; startTime <= (endTime - serviceDurationHourMili - serviceDurationMinutesMili - timeBetweenService); startTime += serviceInterval) {
                var newdate = new Date(startTime); var newHour = newdate.getHours(); var newMinutes = newdate.getMinutes(); if (newHour.toString().length == 1)
                    newHour = '0' + newHour; if (newMinutes.toString().length == 1)
                    newMinutes = '0' + newMinutes; var fullHour = newHour + ':' + newMinutes; var hourExists = false; $.each($tableHour.find('option'), function (index) { $optionVal = $(this).val(); if ($optionVal == fullHour) { hourExists = true; return false; } }); if (!hourExists) $tableHour.append('<option value="' + newHour + ':' + newMinutes + '">' + changeTimeFormat(service.timeFormat, newdate) + '</option>'); else continue;
            }
        }
    }
    function changeTimeFormat(websiteTimeFormat, date) { var dayObj = dayjs(date); if (websiteTimeFormat === 'H:i') { return dayObj.format('HH:mm'); } else if (websiteTimeFormat === 'h:i A') { return dayObj.format('hh:mm A'); } }
    function changeDateFormat(websiteDateFormat, date) { switch (websiteDateFormat) { case 'YYYY-mm-DD m/d/Y': return dayjs(date).format("YYYY-MM-DD"); break; case 'YYYY-mm-DD d/m/Y': var newdate = date.split("/").reverse().join("-"); return dayjs(newdate).format("YYYY-MM-DD"); break; } }
    function getDateFormat(DateChoosed) { var formattedDate = DateChoosed; var day = formattedDate.getDate(); if (day < 10) day = '0' + day; var month = (formattedDate.getMonth() + 1); if (month < 10) month = '0' + month; var year = formattedDate.getFullYear(); return year + '-' + month + '-' + day; }
    function getAnotherDateFormat(DateChoosed) { var formattedDate = DateChoosed; var day = formattedDate.getDate(); if (day < 10) day = '0' + day; var month = (formattedDate.getMonth() + 1); if (month < 10) month = '0' + month; var year = formattedDate.getFullYear(); return month + '/' + day + '/' + year; }
    function getAnotherDateFormatDD_MM_YYYY(DateChoosed) { var formattedDate = DateChoosed; var day = formattedDate.getDate(); if (day < 10) day = '0' + day; var month = (formattedDate.getMonth() + 1); if (month < 10) month = '0' + month; var year = formattedDate.getFullYear(); return day + '/' + month + '/' + year; }
    function getHourFromDate(DateChoosed) { var hourFormat = DateChoosed; var hours = hourFormat.getHours(); if (hours < 10) hours = '0' + hours; var minutes = hourFormat.getMinutes(); if (minutes < 10) minutes = '0' + minutes; miliSeconds = hourFormat.getMilliseconds(); if (miliSeconds < 10) miliSeconds = '0' + miliSeconds; return hours + ':' + minutes + ':' + miliSeconds; }
    function getFullTimeFormat(DateChoosed) { return getDateFormat(DateChoosed) + ' ' + getHourFromDate(DateChoosed); }
    function removeUnavailableHours(struct) {
        var $select = struct.$tableHour; var selectedDate = struct.$calendar.val(); selectedDate = changeDateFormat('YYYY-mm-DD ' + struct.service.dateFormat, selectedDate); var serviceDurationHour = struct.serviceDuration.substring(0, 2); var serviceDurationMin = struct.serviceDuration.substring(3, 5); var unavailableHours = struct.serviceInUse; var timeBetweenService = parseInt(struct.timeBetweenService) * 60 * 1000; var serviceDurationHourMili = parseInt(serviceDurationHour) * 60 * 60 * 1000; var serviceDurationMinutesMili = parseInt(serviceDurationMin) * 60 * 1000; var serviceType = struct.serviceType; var maxParticipants = struct.maxParticipants; var serviceDurationInMili = serviceDurationHourMili + serviceDurationMinutesMili + timeBetweenService; if (serviceType == 'Classes') {
            var hoursToRemove = new Array(); $.each($select.find('option'), function (index, option) {
                var schedualed = 0; var timeFromOption = dayjs(selectedDate + ' ' + option.value).valueOf(); var dateFromPage = dayjs(selectedDate + ' ' + option.value).format("YYYY-MM-DD HH:mm:ss"); $.each(unavailableHours, function (index, date) {
                    if (dateFromPage.valueOf() == date.orderDate.valueOf()) { schedualed++; }
                    if (schedualed >= maxParticipants) { var unavailableTime = dayjs(date.orderDate).valueOf(); if (timeFromOption == unavailableTime) { hoursToRemove.push(option.value); } }
                });
            }); for (var i = 0; i < hoursToRemove.length; i++) {
                var Hour = hoursToRemove[i].substring(0, 2); var Min = hoursToRemove[i].substring(3, 5); Hour = parseInt(Hour) * 60 * 60 * 1000; Min = parseInt(Min) * 60 * 1000; var unavailableTime = Hour + Min; $.each($select.find('option'), function (index, option) {
                    Hour = option.value.substring(0, 2); Min = option.value.substring(3, 5); Hour = parseInt(Hour) * 60 * 60 * 1000; Min = parseInt(Min) * 60 * 1000; var timeFromOption = Hour + Min; if ((timeFromOption >= unavailableTime && timeFromOption < (unavailableTime + serviceDurationInMili))
                        || (timeFromOption > (unavailableTime - serviceDurationInMili) && timeFromOption < unavailableTime)) { $(option).remove(); }
                });
            }
        } else {
            $.each(unavailableHours, function (index, date) {
                var unavailableTime = dayjs(date.orderDate).valueOf(); $.each($select.find('option'), function (index, option) {
                    var timeFromOption = dayjs(selectedDate + ' ' + option.value).valueOf(); if ((timeFromOption >= unavailableTime && timeFromOption < (unavailableTime + serviceDurationInMili))
                        || (timeFromOption > (unavailableTime - serviceDurationInMili) && timeFromOption < unavailableTime)) { $(option).remove(); }
                });
            });
        }
    }
    function updateDiscount(data) { $couponType = $('.couponType'); $couponCode = $('.couponCode'); $validCoupon = $('.valid-coupon'); $invalidCoupon = $('.invalid-coupon'); $couponDiscount = $('.couponDiscount'); $validCoupon.addClass('hidden'); $invalidCoupon.addClass('hidden'); if (data.valid === 'true') { $validCoupon.removeClass('hidden'); $('.discount-text').removeClass('hidden'); $couponCode.val(data.couponCode); $couponDiscount.val(data.discount); $couponType.val(data.type); var totalPrice = parseFloat($('#productPrice').data('price')); var discount = parseFloat(calculateCouponDiscount(totalPrice, $couponDiscount, $couponType)); if ($.isNumeric(discount) && discount > 0) { $('.bookingSubtotal [data-type="price"]').html(totalPrice.toFixed(2)); $('.bookingCoupon [data-type="price"]').html(discount.toFixed(2)); totalPrice = parseFloat(totalPrice) - parseFloat(discount); $('#productPrice [data-type="price"]').html(totalPrice.toFixed(2)); } } else { $invalidCoupon.removeClass('hidden'); } }
    function refreshBusinessHours() {
        var $input = $booking.find('.real-input.schedule-booking-date'); var selectedDate = $input.val(); selectedDate = changeDateFormat('YYYY-mm-DD ' + service.dateFormat, selectedDate); var today = new Date(selectedDate); var lastDateOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0, 23, 59, 59); lastDateOfMonth = getDateFormat(lastDateOfMonth) + ' ' + getHourFromDate(lastDateOfMonth); $.ajax({ url: '/versions/' + $booking.find(".versionNUM").val() + '/wizard/modules/scheduleBooking/get-scheduled-orders.php', method: "post", data: $bookingForm.serialize() + '&selectedDate=' + encodeURIComponent(selectedDate) + '&lastDateOfMonth=' + encodeURIComponent(lastDateOfMonth) + '&cartType=' + encodeURIComponent('96'), })
            .done(function (result) { var serviceInUsestatic = JSON.parse(result); $booking.find('.service-in-use').val(JSON.stringify(serviceInUsestatic)); $tableHour.empty(); var shifts = {}; shifts.service = service; shifts.$calendar = $input; shifts.$serviceDatesContainer = $serviceDatesContainer; shifts.$tableHour = $tableHour; shifts.serviceDuration = $booking.find('.serviceDuration').val(); shifts.timeBetweenService = $booking.find('.timeBetweenService').val(); shifts.selectedDate = selectedDate; shifts.serviceInUse = JSON.parse($booking.find('.service-in-use').val()); shifts.serviceType = $booking.find('.serviceType').val(); shifts.maxParticipants = $booking.find('.maxParticipants').val(); buildHourSelectBox(shifts); removeUnavailableHours(shifts); if ($tableHour.text().length <= 0) { $tableHour.addClass('hidden'); $serviceHourContainer.find('.no-time-available').removeClass('hidden'); $booking.find('.btn-buy-now').attr('disabled', true); } else { $serviceHourContainer.find('.no-time-available').addClass('hidden'); $tableHour.removeClass('hidden'); $booking.find('.btn-buy-now').attr('disabled', false); } });
    }
} jQuery(function ($) { ScheduleBookingModuleInitialize_Layout1(); }); function ScheduleBookingModuleInitialize_Layout1() {
    $(document).on('s123.page.ready', function (event) {
        var $sections = $('.s123-module-scheduleBookings.layout-1'); $sections.each(function (index) {
            var $s = $(this); var $categories = $s.find('.items-categories-container li'); var $products = $s.find('.products-container > div'); bookingInit($s); $categories.off('click').on('click', function (event, initialize) {
                var $category = $(this); $categories.removeClass('active'); $category.addClass('active'); var $filtered = $products.filter('[data-product-filter=' + $category.data('categories-filter') + ']'); if (initialize) { $products.hide(); $filtered.show(); } else { $products.fadeOut(200).promise().done(function () { $filtered.fadeIn(200); $(window).trigger('scroll'); }); }
                return false;
            }); $categories.first().trigger('click', true); $s.find('.items-responsive-filter').click(function () { var $category = $(this); $s.find('.categories-panel').slideToggle('slow'); $category.toggleClass('active'); return false; });
        });
    });
} jQuery(function ($) { ScheduleBookingModuleInitialize_Layout2(); }); function ScheduleBookingModuleInitialize_Layout2() {
    $(document).on('s123.page.ready', function (event) {
        var $sections = $('.s123-module-scheduleBookings.layout-2'); $sections.each(function (index) {
            var $s = $(this); var $categories = $s.find('.items-categories-container li'); var $products = $s.find('.products-container > div'); bookingInit($s); $categories.off('click').on('click', function (event, initialize) {
                var $category = $(this); $categories.removeClass('active'); $category.addClass('active'); var $filtered = $products.filter('[data-product-filter=' + $category.data('categories-filter') + ']'); if (initialize) { $products.hide(); $filtered.show(); } else { $products.fadeOut(200).promise().done(function () { $filtered.fadeIn(200); $(window).trigger('scroll'); }); }
                return false;
            }); $categories.first().trigger('click', true); $s.find('.items-responsive-filter').off('click').on('click', function () { var $category = $(this); $s.find('.categories-panel').slideToggle('slow'); $category.toggleClass('active'); return false; });
        });
    });
}